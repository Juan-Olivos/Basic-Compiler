Type: PRINT | Literal: print
Type: LPAREN | Literal: (
Type: STRING | Literal: How many fibonacci numbers do you want?
Type: RPAREN | Literal: )
Type: SEMICOLON | Literal: ;
Type: INPUT | Literal: input
Type: LPAREN | Literal: (
Type: IDENTIFIER | Literal: nums
Type: RPAREN | Literal: )
Type: SEMICOLON | Literal: ;
Type: PRINT | Literal: print
Type: LPAREN | Literal: (
Type: STRING | Literal: 
Type: RPAREN | Literal: )
Type: SEMICOLON | Literal: ;
Type: LET | Literal: let
Type: IDENTIFIER | Literal: fibonacci
Type: ASSIGN | Literal: =
Type: FUNCTION | Literal: function
Type: LPAREN | Literal: (
Type: IDENTIFIER | Literal: nums
Type: RPAREN | Literal: )
Type: LBRACE | Literal: {
Type: LET | Literal: let
Type: IDENTIFIER | Literal: a
Type: ASSIGN | Literal: =
Type: NUMBER | Literal: 0
Type: SEMICOLON | Literal: ;
Type: LET | Literal: let
Type: IDENTIFIER | Literal: b
Type: ASSIGN | Literal: =
Type: NUMBER | Literal: 1
Type: SEMICOLON | Literal: ;
Type: WHILE | Literal: while
Type: LPAREN | Literal: (
Type: IDENTIFIER | Literal: nums
Type: GT | Literal: >
Type: NUMBER | Literal: 0
Type: RPAREN | Literal: )
Type: LBRACE | Literal: {
Type: PRINT | Literal: print
Type: LPAREN | Literal: (
Type: IDENTIFIER | Literal: a
Type: RPAREN | Literal: )
Type: SEMICOLON | Literal: ;
Type: LET | Literal: let
Type: IDENTIFIER | Literal: c
Type: ASSIGN | Literal: =
Type: IDENTIFIER | Literal: a
Type: PLUS | Literal: +
Type: IDENTIFIER | Literal: b
Type: SEMICOLON | Literal: ;
Type: LET | Literal: let
Type: IDENTIFIER | Literal: a
Type: ASSIGN | Literal: =
Type: IDENTIFIER | Literal: b
Type: SEMICOLON | Literal: ;
Type: LET | Literal: let
Type: IDENTIFIER | Literal: b
Type: ASSIGN | Literal: =
Type: IDENTIFIER | Literal: c
Type: SEMICOLON | Literal: ;
Type: IDENTIFIER | Literal: nums
Type: DECRE | Literal: --
Type: SEMICOLON | Literal: ;
Type: RBRACE | Literal: }
Type: RBRACE | Literal: }
Type: IDENTIFIER | Literal: fibonacci
Type: LPAREN | Literal: (
Type: IDENTIFIER | Literal: nums
Type: RPAREN | Literal: )
Type: SEMICOLON | Literal: ;
